buildscript {
    ext.kotlin_version = '1.0.3'
    ext.quasar_version = '0.7.6'
    ext.asm_version = '0.5.3'
    ext.artemis_version = '1.3.0'
    ext.jackson_version = '2.8.0.rc2'
    ext.jetty_version = '9.3.9.v20160517'
    ext.jersey_version = '2.23.1'
	ext.jolokia_version = '2.0.0-M1'
    ext.assertj_version = '3.5.1'
    ext.log4j_version = '2.6.2'
    ext.bouncycastle_version = '1.54'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Can run 'gradle dependencyUpdates' to find new versions of things.
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

plugins {
    // TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
    // but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
    id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: QuasarPlugin
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'maven-publish'

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    // Our version: bump this on release.
    group 'com.r3corda'
    version '0.4-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
    jcenter()
    maven {
        url 'https://dl.bintray.com/kotlin/exposed'
    }
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
}

//noinspection GroovyAssignabilityCheck
configurations {
    // we don't want isolated.jar in classPath, since we want to test jar being dynamically loaded as an attachment
    runtime.exclude module: 'isolated'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// This is required for quasar. I think.
applicationDefaultJvmArgs = ["-javaagent:${configurations.quasar.singleFile}"]
// Needed by the :startScripts task
mainClassName = 'com.r3corda.demos.TraderDemoKt'

// To find potential version conflicts, run "gradle htmlDependencyReport" and then look in
// build/reports/project/dependencies/index.html for green highlighted parts of the tree.

dependencies {
    compile project(':node')
    // TODO: Demos should not depend on test code, but only use production APIs
    compile project(':test-utils')

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-support-jdk8:0.2"
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'co.paralleluniverse:capsule:1.0.3'

    // Unit testing helpers.
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.4.1'

    // Integration test helpers
    integrationTestCompile 'junit:junit:4.12'
    integrationTestCompile 'org.assertj:assertj-core:${assertj_version}'
    integrationTestCompile project(':test-utils')
}

// Package up the demo programs.
task getRateFixDemo(type: CreateStartScripts) {
    mainClassName = "com.r3corda.demos.RateFixDemoKt"
    applicationName = "get-rate-fix"
    defaultJvmOpts = ["-javaagent:${configurations.quasar.singleFile}"]
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

task getIRSDemo(type: CreateStartScripts) {
    mainClassName = "com.r3corda.demos.IRSDemoKt"
    applicationName = "irsdemo"
    defaultJvmOpts = ["-javaagent:${configurations.quasar.singleFile}"]
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

task getTraderDemo(type: CreateStartScripts) {
    mainClassName = "com.r3corda.demos.TraderDemoKt"
    applicationName = "trader-demo"
    defaultJvmOpts = ["-javaagent:${configurations.quasar.singleFile}"]
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

// Force windows script classpath to wildcard path to avoid the 'Command Line Is Too Long' issues
// with generated scripts. Include Jolokia .war explicitly as this isn't picked up by wildcard
tasks.withType(CreateStartScripts) {
    doLast {
        windowsScript.text = windowsScript
                .readLines()
                .collect { line -> line.replaceAll(~/^set CLASSPATH=.*$/, 'set CLASSPATH=%APP_HOME%/lib/*;%APP_HOME%/lib/jolokia-agent-war-'+project.ext.jolokia_version+'.war') }
                .join('\r\n')
    }
}

task integrationTest(type: Test, dependsOn: [':node:integrationTest',':client:integrationTest']) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}


task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

quasarScan.dependsOn('classes', 'core:classes', 'contracts:classes', 'node:classes')

applicationDistribution.into("bin") {
    from(getRateFixDemo)
    from(getIRSDemo)
    from(getTraderDemo)
    fileMode = 0755
}

task buildCordaJAR(type: FatCapsule, dependsOn: 'quasarScan') {
    applicationClass 'com.r3corda.node.MainKt'
    archiveName 'corda.jar'
    applicationSource = files(project.tasks.findByName('jar'), 'build/classes/main/CordaCaplet.class')

    capsuleManifest {
        appClassPath = ["jolokia-agent-war-${project.ext.jolokia_version}.war"]
        systemProperties['log4j.configuration'] = 'log4j2.xml'
        javaAgents = ["quasar-core-${quasar_version}-jdk8.jar"]
        minJavaVersion = '1.8.0'
        caplets = ['CordaCaplet']
    }
}

task installTemplateNodes(dependsOn: 'buildCordaJAR') << {
    copy {
        from buildCordaJAR.outputs.getFiles()
        from 'config/dev/nameservernode.conf'
        into "${buildDir}/nodes/nameserver"
        rename 'nameservernode.conf', 'node.conf'
    }

    copy {
        from buildCordaJAR.outputs.getFiles()
        from 'config/dev/generalnodea.conf'
        into "${buildDir}/nodes/nodea"
        rename 'generalnodea.conf', 'node.conf'
    }

    copy {
        from buildCordaJAR.outputs.getFiles()
        from 'config/dev/generalnodeb.conf'
        into "${buildDir}/nodes/nodeb"
        rename 'generalnodeb.conf', 'node.conf'
    }

    delete("${buildDir}/nodes/runnodes")
    def jarName = buildCordaJAR.outputs.getFiles().getSingleFile().getName()
    copy {
        from "buildSrc/scripts/runnodes"
        filter { String line -> line.replace("JAR_NAME", jarName) }
        filter(org.apache.tools.ant.filters.FixCrLfFilter.class, eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance("lf"))
        into "${buildDir}/nodes"
    }

}

// TODO: Rename capsule to "corda"
publishing {
    publications {
        corda(MavenPublication) {
            artifactId 'corda'

            artifact "${buildDir}/libs/corda.jar"
        }
    }
}