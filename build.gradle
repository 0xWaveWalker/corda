group 'com.r3cev.prototyping'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'project-report'

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

buildscript {
    ext.kotlin_version = '1.0.2'
    ext.quasar_version = '0.7.5'
    ext.asm_version = '0.5.3'
    ext.artemis_version = '1.2.0'
    ext.jetty_version = '9.1.1.v20140108'
    ext.jersey_version = '2.22.2'
	ext.jolokia_version = '2.0.0-M1'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
    jcenter()
}

//noinspection GroovyAssignabilityCheck
configurations {
    quasar

    // we don't want isolated.jar in classPath, since we want to test jar being dynamically loaded as an attachment
    runtime.exclude module: 'isolated'
}

// To find potential version conflicts, run "gradle htmlDependencyReport" and then look in
// build/reports/project/dependencies/index.html for green highlighted parts of the tree.

dependencies {
    compile project(':node')

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-support-jdk8:0.1"

    // Quasar: for the bytecode rewriting for state machines.
    quasar "co.paralleluniverse:quasar-core:${quasar_version}:jdk8@jar"

    // Unit testing helpers.
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.4.1'
}

// These lines tell Gradle to add a couple of JVM command line arguments to unit test and program runs, which set up
// the Quasar bytecode rewriting system so fibers can be suspended. The verifyInstrumentation line makes things run
// slower but you get a much better error message if you forget to annotate a method with @Suspendable that needs it.
//
// In Java 9 (hopefully) the requirement to annotate methods as @Suspendable will go away.

applicationDefaultJvmArgs = ["-javaagent:${configurations.quasar.singleFile}"]
mainClassName = 'demos.TraderDemoKt'

tasks.withType(Test) {
    jvmArgs "-javaagent:${configurations.quasar.singleFile}"
    jvmArgs "-Dco.paralleluniverse.fibers.verifyInstrumentation"
}
tasks.withType(JavaExec) {
    jvmArgs "-javaagent:${configurations.quasar.singleFile}"
    jvmArgs "-Dco.paralleluniverse.fibers.verifyInstrumentation"
}

// Package up the other demo programs.
task getRateFixDemo(type: CreateStartScripts) {
    mainClassName = "demos.RateFixDemoKt"
    applicationName = "get-rate-fix"
    defaultJvmOpts = ["-javaagent:${configurations.quasar.singleFile}"]
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

task getIRSDemo(type: CreateStartScripts) {
    mainClassName = "demos.IRSDemoKt"
    applicationName = "irsdemo"
    defaultJvmOpts = ["-javaagent:${configurations.quasar.singleFile}"]
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

// Force windows script classpath to wildcard path to avoid the 'Command Line Is Too Long' issues
// with generated scripts. Include Jolokia .war explicitly as this isn't picked up by wildcard
tasks.withType(CreateStartScripts)
{
    doLast {
        windowsScript.text = windowsScript
                .readLines()
                .collect { line -> line.replaceAll(~/^set CLASSPATH=.*$/, 'set CLASSPATH=%APP_HOME%/lib/*;%APP_HOME%/lib/jolokia-agent-war-'+project.ext.jolokia_version+'.war') }
                .join('\r\n')
    }
}

// These lines tell gradle to run the Quasar suspendables scanner to look for unannotated super methods
// that have @Suspendable sub implementations.  These tend to cause NPEs and are not caught by the verifier
// NOTE: need to make sure the output isn't on the classpath or every other run it generates empty results, so
// we explicitly delete to avoid that happening.  We also need to turn off what seems to be a spurious warning in the IDE
//
// TODO: Make this task incremental, as it can be quite slow.

//noinspection GroovyAssignabilityCheck
task quasarScan(dependsOn: ['classes', 'core:classes', 'contracts:classes', 'node:classes']) << {
    ant.taskdef(name:'scanSuspendables', classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
            classpath: "${sourceSets.main.output.classesDir}:${sourceSets.main.output.resourcesDir}:${configurations.runtime.asPath}")
    delete "$sourceSets.main.output.resourcesDir/META-INF/suspendables", "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers"
    ant.scanSuspendables(
            auto:false,
            suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
            supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers") {
        fileset(dir: sourceSets.main.output.classesDir)
    }
}

jar.dependsOn quasarScan

applicationDistribution.into("bin") {
    from(getRateFixDemo)
    from(getIRSDemo)
    fileMode = 0755
}