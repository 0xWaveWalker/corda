buildscript {
    ext.kotlin_version = '1.0.3'
    ext.quasar_version = '0.7.6'
    ext.asm_version = '0.5.3'
    ext.artemis_version = '1.4.0'
    ext.jackson_version = '2.8.0.rc2'
    ext.jetty_version = '9.3.9.v20160517'
    ext.jersey_version = '2.23.1'
	ext.jolokia_version = '2.0.0-M1'
    ext.assertj_version = '3.5.1'
    ext.log4j_version = '2.6.2'
    ext.bouncycastle_version = '1.54'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Can run 'gradle dependencyUpdates' to find new versions of things.
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

plugins {
    // TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
    // but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
    id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: 'kotlin'
apply plugin: 'project-report'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'maven-publish'
apply plugin: QuasarPlugin

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    // Our version: bump this on release.
    group 'com.r3corda'
    version '0.5-SNAPSHOT'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Required for Quasar. TODO: Remove this dependency.
    compile "com.google.guava:guava:19.0"
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task buildCordaJAR(type: FatCapsule, dependsOn: ['quasarScan', 'buildCertSigningRequestUtilityJAR']) {
    applicationClass 'com.r3corda.node.MainKt'
    archiveName 'corda.jar'
    applicationSource = files(project.tasks.findByName('jar'), 'node/build/classes/main/CordaCaplet.class')

    capsuleManifest {
        appClassPath = ["jolokia-agent-war-${project.ext.jolokia_version}.war"]
        systemProperties['log4j.configuration'] = 'log4j2.xml'
        javaAgents = ["quasar-core-${quasar_version}-jdk8.jar"]
        minJavaVersion = '1.8.0'
        caplets = ['CordaCaplet']
    }
}

task buildCertSigningRequestUtilityJAR(type: FatCapsule, dependsOn: project.jar) {
    applicationClass 'com.r3corda.node.utilities.certsigning.CertificateSignerKt'
    archiveName 'certSigningRequestUtility.jar'
    capsuleManifest {
        systemProperties['log4j.configuration'] = 'log4j2.xml'
        minJavaVersion = '1.8.0'
    }
}

// TODO: Use the Cordformation plugin.
task installTemplateNodes(dependsOn: 'buildCordaJAR') << {
    copy {
        from buildCordaJAR.outputs.getFiles()
        from 'config/dev/nameservernode.conf'
        into "${buildDir}/nodes/nameserver"
        rename 'nameservernode.conf', 'node.conf'
    }

    copy {
        from buildCordaJAR.outputs.getFiles()
        from 'config/dev/generalnodea.conf'
        into "${buildDir}/nodes/nodea"
        rename 'generalnodea.conf', 'node.conf'
    }

    copy {
        from buildCordaJAR.outputs.getFiles()
        from 'config/dev/generalnodeb.conf'
        into "${buildDir}/nodes/nodeb"
        rename 'generalnodeb.conf', 'node.conf'
    }

    delete("${buildDir}/nodes/runnodes")
    def jarName = buildCordaJAR.outputs.getFiles().getSingleFile().getName()
    copy {
        from "buildSrc/scripts/runnodes"
        filter { String line -> line.replace("JAR_NAME", jarName) }
        filter(org.apache.tools.ant.filters.FixCrLfFilter.class, eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance("lf"))
        into "${buildDir}/nodes"
    }
}

// Aliasing the publishToMavenLocal for simplicity.
// TODO: Verify this works for gradle plugins.
task(install, dependsOn: 'publishToMavenLocal')

publishing {
    publications {
        corda(MavenPublication) {
            artifactId 'corda'

            artifact buildCordaJAR {
                classifier ""
            }
        }
    }
}
