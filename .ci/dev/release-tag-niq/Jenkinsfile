#!groovy
/**
 * Jenkins pipeline to build Corda Enterprise Network Services
 */

/**
 * Kill already started job.
 * Assume new commit takes precendence and results from previous
 * unfinished builds are not required.
 * This feature doesn't play well with disableConcurrentBuilds() option
 */
@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

/**
 * Sense environment
 */
boolean isReleaseTag = (env.TAG_NAME =~ /^ci03-test-.+$/)

pipeline {
    agent { label 'k8s' }

    parameters {
        booleanParam defaultValue: isReleaseTag, description: 'Publish artifacts to Artifactory?', name: 'DO_PUBLISH'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
        timeout(time: 3, unit: 'HOURS')
    }

    environment {
        DOCKER_TAG_TO_USE = "${env.GIT_COMMIT.subSequence(0, 8)}"
        EXECUTOR_NUMBER = "${env.EXECUTOR_NUMBER}"
        BUILD_ID = "${env.BUILD_ID}-${env.JOB_NAME}"
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
        CORDA_ARTIFACTORY_USERNAME = "${env.ARTIFACTORY_CREDENTIALS_USR}"
        CORDA_ARTIFACTORY_PASSWORD = "${env.ARTIFACTORY_CREDENTIALS_PSW}"
        ARTIFACTORY_BUILD_NAME = "Corda/Jenkins/${!isReleaseTag?"snapshot/":""}${env.BRANCH_NAME}".replaceAll("/", " :: ")
    }

    stages {
//        stage('Deploy Nodes') {
//            steps {
//                sh "./gradlew --no-daemon jar deployNodes"
//            }
//        }
//
//        stage('Generate Build Image') {
//            steps {
//                withCredentials([string(credentialsId: 'container_reg_passwd', variable: 'DOCKER_PUSH_PWD')]) {
//                    sh "./gradlew " +
//                            "-Dkubenetize=true " +
//                            "-Ddocker.push.password=\"\${DOCKER_PUSH_PWD}\" " +
//                            "-Ddocker.work.dir=\"/tmp/\${EXECUTOR_NUMBER}\" " +
//                            "-Ddocker.build.tag=\"\${DOCKER_TAG_TO_USE}\"" +
//                            " clean preAllocateForParallelRegressionTest preAllocateForAllParallelSlowIntegrationTest pushBuildImage --stacktrace"
//                }
//                sh "kubectl auth can-i get pods"
//            }
//        }
//
//        stage('Testing phase') {
//            parallel {
//                stage('Regression Test') {
//                    steps {
//                        sh "./gradlew " +
//                                "-DbuildId=\"\${BUILD_ID}\" " +
//                                "-Dkubenetize=true " +
//                                "-Ddocker.run.tag=\"\${DOCKER_TAG_TO_USE}\" " +
//                                "-Dartifactory.username=\"\${ARTIFACTORY_CREDENTIALS_USR}\" " +
//                                "-Dartifactory.password=\"\${ARTIFACTORY_CREDENTIALS_PSW}\" " +
//                                "-Dgit.branch=\"\${GIT_BRANCH}\" " +
//                                "-Dgit.target.branch=\"\${GIT_BRANCH}\" " +
//                                " parallelRegressionTest --stacktrace"
//                    }
//                }
//                stage('Slow Integration Test') {
//                    steps {
//                        sh "./gradlew " +
//                                "-DbuildId=\"\${BUILD_ID}\" " +
//                                "-Dkubenetize=true " +
//                                "-Ddocker.run.tag=\"\${DOCKER_TAG_TO_USE}\" " +
//                                "-Dartifactory.username=\"\${ARTIFACTORY_CREDENTIALS_USR}\" " +
//                                "-Dartifactory.password=\"\${ARTIFACTORY_CREDENTIALS_PSW}\" " +
//                                "-Dgit.branch=\"\${GIT_BRANCH}\" " +
//                                "-Dgit.target.branch=\"\${GIT_BRANCH}\" " +
//                                " allParallelSlowIntegrationTest --stacktrace"
//                    }
//                }
//            }
//        }

        stage('Build Fat Jar') {
            when {
                expression { params.DO_PUBLISH }
                beforeAgent true
            }
            steps {
                sh "./gradlew jar --stacktrace"
            }
        }

        stage('Get Project Properties') {
            when {
                expression { params.DO_PUBLISH }
                beforeAgent true
            }
            steps {
                sh "./gradlew properties >all-properties"
            }
        }

        stage('Nexus IQ Test') {
            when {
                expression { params.DO_PUBLISH }
                beforeAgent true
            }
            steps {
                sh "echo '++++ NexusIQ test placeholder ++++'"
            }
        }

        stage('Publish to Artifactory') {
            when {
                expression { params.DO_PUBLISH }
                beforeAgent true
            }
            steps {
                rtServer(
                        id: 'R3-Artifactory',
                        url: 'https://software.r3.com/artifactory',
                        credentialsId: 'artifactory-credentials'
                )
                rtGradleDeployer(
                        id: 'deployer',
                        serverId: 'R3-Artifactory',
//                         repo: isRelease ? 'r3-corda-releases' : 'r3-corda-dev'
                        repo: 'r3-tools-dev'
                )
                rtGradleRun(
                        usesPlugin: true,
                        useWrapper: true,
                        switches: '-s --info',
                        tasks: 'artifactoryPublish',
                        deployerId: 'deployer',
                        buildName: env.ARTIFACTORY_BUILD_NAME
                )
                rtPublishBuildInfo(
                        serverId: 'R3-Artifactory',
                        buildName: env.ARTIFACTORY_BUILD_NAME
                )
            }
        }
    }

    post {
        always {

            // add archive and junit post steps
            // ...

            // Summary email
            // ...

            script {
                echo('++++ post condition placeholder ++++')
            }
        }
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}